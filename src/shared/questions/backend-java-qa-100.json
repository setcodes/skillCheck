[
  {
    "id": "core_01",
    "title": "Разница между JDK, JRE и JVM?",
    "category": "Java Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Разница между JDK, JRE и JVM?",
    "answer": "JVM исполняет байткод; JRE — JVM + библиотеки; JDK — JRE + компилятор/инструменты."
  },
  {
    "id": "core_02",
    "title": "Чем примитивы отличаются от ссылочных?",
    "category": "Java Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Чем примитивы отличаются от ссылочных?",
    "answer": "Примитивы — значения, не null; ссылочные — ссылки на объекты, могут быть null."
  },
  {
    "id": "core_03",
    "title": "Autoboxing/unboxing — риски?",
    "category": "Java Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Autoboxing/unboxing — риски?",
    "answer": "Лишние аллокации, NPE при unboxing null; сравнивать wrapper-ы через equals."
  },
  {
    "id": "core_04",
    "title": "equals/hashCode контракт?",
    "category": "Java Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "equals/hashCode контракт?",
    "answer": "Рефлексивность/симметрия/транзитивность; равные объекты — одинаковые hashCode."
  },
  {
    "id": "core_05",
    "title": "final/finally/finalize — различия?",
    "category": "Java Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "final/finally/finalize — различия?",
    "answer": "final — модификатор; finally — блок; finalize — устаревший GC-хук."
  },
  {
    "id": "core_06",
    "title": "Immutable класс — как?",
    "category": "Java Core",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Immutable класс — как?",
    "answer": "final класс, private final поля, защитные копии, без сеттеров."
  },
  {
    "id": "core_07",
    "title": "Record/Sealed — когда?",
    "category": "Java Core",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Record/Sealed — когда?",
    "answer": "Record — DTO; sealed — ограничить наследование для исчерпывающих иерархий."
  },
  {
    "id": "core_08",
    "title": "Паттерн-матчинг для instanceof/switch — плюсы?",
    "category": "Java Core",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Паттерн-матчинг для instanceof/switch — плюсы?",
    "answer": "Меньше бойлерплейта, безопасные приведения, исчерпывающие ветки."
  },
  {
    "id": "core_09",
    "title": "var — когда уместен?",
    "category": "Java Core",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "var — когда уместен?",
    "answer": "Когда тип очевиден; избегать в неочевидных местах."
  },
  {
    "id": "jvm_01",
    "title": "Структура памяти JVM?",
    "category": "JVM/JMM",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Структура памяти JVM?",
    "answer": "Stack (кадры), heap (объекты), metaspace (метаданные классов)."
  },
  {
    "id": "jvm_02",
    "title": "Bytecode и classloader?",
    "category": "JVM/JMM",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Bytecode и classloader?",
    "answer": "JVM исполняет байткод; загрузчики bootstrap/platform/app/custom."
  },
  {
    "id": "jvm_03",
    "title": "JIT: C1/C2 и tiered compilation?",
    "category": "JVM/JMM",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "JIT: C1/C2 и tiered compilation?",
    "answer": "Смешанный режим: быстрый C1 и оптимизирующий C2 по профилю."
  },
  {
    "id": "jvm_04",
    "title": "JMM: happens-before/volatile?",
    "category": "JVM/JMM",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "JMM: happens-before/volatile?",
    "answer": "volatile — видимость и порядок; hb — согласованные гарантии между потоками."
  },
  {
    "id": "jvm_05",
    "title": "Escape analysis/stack allocation?",
    "category": "JVM/JMM",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Escape analysis/stack allocation?",
    "answer": "Размещение на стеке и удаление синхронизации при отсутствии утечек."
  },
  {
    "id": "jvm_06",
    "title": "GC: G1/ZGC/Shenandoah — сравнение?",
    "category": "JVM/JMM",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "GC: G1/ZGC/Shenandoah — сравнение?",
    "answer": "G1 — регионы; ZGC/Shenandoah — ультра-низкие паузы с барьерами."
  },
  {
    "id": "jvm_07",
    "title": "Тюнинг GC — что измерять?",
    "category": "JVM/JMM",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Тюнинг GC — что измерять?",
    "answer": "Pause time/throughput/alloc rate; GC unified logging; -Xms/-Xmx."
  },
  {
    "id": "jvm_08",
    "title": "ClassLoader leakage — причины/поиск?",
    "category": "JVM/JMM",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "ClassLoader leakage — причины/поиск?",
    "answer": "Статика, кэши, ThreadLocal; анализ heap dump-ами."
  },
  {
    "id": "col_01",
    "title": "ArrayList vs LinkedList?",
    "category": "Collections",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "ArrayList vs LinkedList?",
    "answer": "ArrayList O(1) доступ; LinkedList — вставки, но хуже по кеш-локальности."
  },
  {
    "id": "col_02",
    "title": "HashMap vs TreeMap?",
    "category": "Collections",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "HashMap vs TreeMap?",
    "answer": "HashMap — O(1) среднее; TreeMap — O(log n) и сортировка."
  },
  {
    "id": "col_03",
    "title": "ConcurrentHashMap — особенности?",
    "category": "Collections",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "ConcurrentHashMap — особенности?",
    "answer": "Неблокирующие чтения, локальные блокировки, слабые итерации."
  },
  {
    "id": "col_04",
    "title": "CopyOnWriteArrayList — когда?",
    "category": "Collections",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "CopyOnWriteArrayList — когда?",
    "answer": "Частые чтения, редкие записи; дорого по памяти/записи."
  },
  {
    "id": "col_05",
    "title": "Comparable/Comparator — тонкости?",
    "category": "Collections",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Comparable/Comparator — тонкости?",
    "answer": "Транзитивность, equals-совместимость, null, избегать переполнений."
  },
  {
    "id": "col_06",
    "title": "WeakHashMap/Reference — применимость?",
    "category": "Collections",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "WeakHashMap/Reference — применимость?",
    "answer": "Кэши с жизненным циклом объекта-владельца."
  },
  {
    "id": "conc_01",
    "title": "Thread vs Runnable/Callable?",
    "category": "Concurrency",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Thread vs Runnable/Callable?",
    "answer": "Thread — поток; Runnable/Callable — задача; использовать ExecutorService."
  },
  {
    "id": "conc_02",
    "title": "synchronized — как работает?",
    "category": "Concurrency",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "synchronized — как работает?",
    "answer": "Монитор на объекте/классе; защищает критическую секцию."
  },
  {
    "id": "conc_03",
    "title": "ReentrantLock vs synchronized?",
    "category": "Concurrency",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "ReentrantLock vs synchronized?",
    "answer": "tryLock/interruptible/fair; нужен unlock в finally."
  },
  {
    "id": "conc_04",
    "title": "volatile vs lock — когда?",
    "category": "Concurrency",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "volatile vs lock — когда?",
    "answer": "volatile для видимости одиночных операций; lock/атомики для инвариантов."
  },
  {
    "id": "conc_05",
    "title": "Atomic* и LongAdder — отличие?",
    "category": "Concurrency",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Atomic* и LongAdder — отличие?",
    "answer": "Atomic — CAS; LongAdder быстрее под высокой конкуренцией."
  },
  {
    "id": "conc_06",
    "title": "ForkJoinPool/Parallel Streams — риски?",
    "category": "Concurrency",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "ForkJoinPool/Parallel Streams — риски?",
    "answer": "Общий пул, блокирующие операции вредят; кастомные executors."
  },
  {
    "id": "conc_07",
    "title": "CompletableFuture — композиция/тайм-ауты?",
    "category": "Concurrency",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "CompletableFuture — композиция/тайм-ауты?",
    "answer": "thenCompose/thenCombine, orTimeout/completeOnTimeout, обработка исключений."
  },
  {
    "id": "conc_08",
    "title": "Deadlock/livelock/starvation — диагностика?",
    "category": "Concurrency",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Deadlock/livelock/starvation — диагностика?",
    "answer": "jstack/JFR, порядок захватов, тайм-ауты."
  },
  {
    "id": "io_01",
    "title": "Streams vs Reader/Writer?",
    "category": "I/O",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Streams vs Reader/Writer?",
    "answer": "Байты vs символы; кодировки; try-with-resources."
  },
  {
    "id": "io_02",
    "title": "Buffered I/O — зачем?",
    "category": "I/O",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Buffered I/O — зачем?",
    "answer": "Меньше системных вызовов, выше производительность."
  },
  {
    "id": "io_03",
    "title": "Channels/ByteBuffer — преимущества?",
    "category": "NIO",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Channels/ByteBuffer — преимущества?",
    "answer": "Неблокирующий I/O, селекторы, прямые буферы."
  },
  {
    "id": "io_04",
    "title": "Netty/Vert.x — зачем?",
    "category": "NIO",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Netty/Vert.x — зачем?",
    "answer": "Масштабируемость, backpressure; сложнее дебаг."
  },
  {
    "id": "gen_01",
    "title": "Type erasure — что это?",
    "category": "Generics",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Type erasure — что это?",
    "answer": "Стирание типов — generics только на compile time."
  },
  {
    "id": "gen_02",
    "title": "PECS правило?",
    "category": "Generics",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "PECS правило?",
    "answer": "Producer Extends, Consumer Super."
  },
  {
    "id": "gen_03",
    "title": "Функциональные интерфейсы/лямбды?",
    "category": "FP",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Функциональные интерфейсы/лямбды?",
    "answer": "Predicate/Function/Consumer/Supplier; ссылки на методы."
  },
  {
    "id": "gen_04",
    "title": "Stream API — подводные камни?",
    "category": "FP",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Stream API — подводные камни?",
    "answer": "Ленивость, одноразовость, порядок операций, осторожно с parallel."
  },
  {
    "id": "spring_01",
    "title": "DI/IoC — смысл?",
    "category": "Spring Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "DI/IoC — смысл?",
    "answer": "Контейнер управляет зависимостями и жизненным циклом бинов."
  },
  {
    "id": "spring_02",
    "title": "Scopes бинов?",
    "category": "Spring Core",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Scopes бинов?",
    "answer": "singleton/prototype/request/session/application."
  },
  {
    "id": "spring_03",
    "title": "Стереотипы @Component/@Service/@Repository?",
    "category": "Spring Core",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Стереотипы @Component/@Service/@Repository?",
    "answer": "Семантика; у @Repository переводчик исключений."
  },
  {
    "id": "spring_04",
    "title": "Жизненный цикл бина @PostConstruct/@PreDestroy?",
    "category": "Spring Core",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Жизненный цикл бина @PostConstruct/@PreDestroy?",
    "answer": "Инициализация после DI; освобождение ресурсов при уничтожении."
  },
  {
    "id": "spring_05",
    "title": "AOP — практические кейсы?",
    "category": "Spring Core",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "AOP — практические кейсы?",
    "answer": "Транзакции, кэш, логирование, метрики/аудит."
  },
  {
    "id": "spring_06",
    "title": "JDK Proxy vs CGLIB?",
    "category": "Spring Core",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "JDK Proxy vs CGLIB?",
    "answer": "Интерфейсы — JDK; классы — CGLIB; финальные методы не перехватываются."
  },
  {
    "id": "spring_07",
    "title": "Circular dependency — решения?",
    "category": "Spring Core",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Circular dependency — решения?",
    "answer": "Конструкторная инъекция, @Lazy, событийные шины."
  },
  {
    "id": "boot_01",
    "title": "Преимущества Boot?",
    "category": "Spring Boot",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Преимущества Boot?",
    "answer": "Автоконфигурация, стартеры, встроенные сервера, actuator."
  },
  {
    "id": "boot_02",
    "title": "application.yml и профили?",
    "category": "Spring Boot",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "application.yml и профили?",
    "answer": "spring.profiles, разные конфиги на среды."
  },
  {
    "id": "boot_03",
    "title": "Actuator — ключевые эндпоинты?",
    "category": "Spring Boot",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Actuator — ключевые эндпоинты?",
    "answer": "health, info, metrics, env, prometheus."
  },
  {
    "id": "boot_04",
    "title": "Переопределение автоконфигурации?",
    "category": "Spring Boot",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Переопределение автоконфигурации?",
    "answer": "Исключения, свои @Configuration, @Primary/@Qualifier."
  },
  {
    "id": "boot_05",
    "title": "Секреты/конфиги по средам?",
    "category": "Spring Boot",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Секреты/конфиги по средам?",
    "answer": "@Profile, внешние Secret Manager/Vault."
  },
  {
    "id": "boot_06",
    "title": "Модульные границы в Boot‑монолите?",
    "category": "Spring Boot",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Модульные границы в Boot‑монолите?",
    "answer": "Изоляция зависимостей, явные интерфейсы, пакетные слои."
  },
  {
    "id": "jpa_01",
    "title": "Entity/@Id — основы?",
    "category": "JPA/Hibernate",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Entity/@Id — основы?",
    "answer": "Сущность↔таблица; @Id — PK; стратегии IDENTITY/SEQUENCE/TABLE/UUID."
  },
  {
    "id": "jpa_02",
    "title": "EAGER vs LAZY?",
    "category": "JPA/Hibernate",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "EAGER vs LAZY?",
    "answer": "LAZY по умолчанию, EAGER осторожно."
  },
  {
    "id": "jpa_03",
    "title": "N+1 — как решать?",
    "category": "JPA/Hibernate",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "N+1 — как решать?",
    "answer": "fetch join, EntityGraph, батчинг, DTO."
  },
  {
    "id": "jpa_04",
    "title": "OneToMany/ManyToOne — владелец?",
    "category": "JPA/Hibernate",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "OneToMany/ManyToOne — владелец?",
    "answer": "FK у владельца; mappedBy у обратной стороны."
  },
  {
    "id": "jpa_05",
    "title": "Транзакции/изоляция?",
    "category": "JPA/Hibernate",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Транзакции/изоляция?",
    "answer": "@Transactional; уровни БД; оптимист/пессимист lock."
  },
  {
    "id": "jpa_06",
    "title": "Кэш 2-го уровня/кэш запросов?",
    "category": "JPA/Hibernate",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Кэш 2-го уровня/кэш запросов?",
    "answer": "Для редко меняемых данных; инвалидация."
  },
  {
    "id": "jpa_07",
    "title": "Наследование стратегий?",
    "category": "JPA/Hibernate",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Наследование стратегий?",
    "answer": "SINGLE_TABLE/JOINED/TABLE_PER_CLASS — компромиссы."
  },
  {
    "id": "jpa_08",
    "title": "Batch updates/saveAll — тонкости?",
    "category": "JPA/Hibernate",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Batch updates/saveAll — тонкости?",
    "answer": "jdbc batch size, flush/clear, избегать каскадов."
  },
  {
    "id": "sec_01",
    "title": "Authn vs Authz?",
    "category": "Spring Security",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Authn vs Authz?",
    "answer": "Кто вы vs что можно; фильтры/правила доступа."
  },
  {
    "id": "sec_02",
    "title": "SecurityContext — хранение?",
    "category": "Spring Security",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "SecurityContext — хранение?",
    "answer": "ThreadLocal; асинхронные потоки требуют перенос контекста."
  },
  {
    "id": "sec_03",
    "title": "JWT — структура/риски?",
    "category": "Spring Security",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "JWT — структура/риски?",
    "answer": "Header.Payload.Signature; риски alg=none/утечки секретов/ротация."
  },
  {
    "id": "sec_04",
    "title": "CSRF в SPA/REST?",
    "category": "Spring Security",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "CSRF в SPA/REST?",
    "answer": "SameSite cookies, CSRF токены; Bearer stateless — часто выключают."
  },
  {
    "id": "sec_05",
    "title": "@PreAuthorize — практика?",
    "category": "Spring Security",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "@PreAuthorize — практика?",
    "answer": "Вынос сложной логики, тесты, аудит, минимальные привилегии."
  },
  {
    "id": "sec_06",
    "title": "mTLS — когда?",
    "category": "Spring Security",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "mTLS — когда?",
    "answer": "Межсервисная аутентификация, truststore/keystore."
  },
  {
    "id": "api_01",
    "title": "PUT vs PATCH?",
    "category": "API",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "PUT vs PATCH?",
    "answer": "PUT — идемпотентная замена; PATCH — частичное обновление."
  },
  {
    "id": "api_02",
    "title": "Коды HTTP — основные классы?",
    "category": "API",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Коды HTTP — основные классы?",
    "answer": "2xx успех, 3xx редирект, 4xx клиент, 5xx сервер; 429 — лимит."
  },
  {
    "id": "api_03",
    "title": "Idempotency-Key — зачем?",
    "category": "API",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Idempotency-Key — зачем?",
    "answer": "Безопасные повторы POST, предотвращение дублей."
  },
  {
    "id": "api_04",
    "title": "gRPC vs REST?",
    "category": "API",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "gRPC vs REST?",
    "answer": "gRPC — бинарный/контракт/стриминг; REST — простота/совместимость."
  },
  {
    "id": "api_05",
    "title": "Версионирование API — как?",
    "category": "API",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Версионирование API — как?",
    "answer": "Путь/заголовок, совместимость назад, депрекации."
  },
  {
    "id": "msg_01",
    "title": "Сущности Kafka?",
    "category": "Messaging",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Сущности Kafka?",
    "answer": "Topic/partition/offset/consumer group; масштабирование по партициям."
  },
  {
    "id": "msg_02",
    "title": "Exactly-once/At-least-once?",
    "category": "Messaging",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Exactly-once/At-least-once?",
    "answer": "Транзакционные продьюсеры/консумеры, идемпотентность, outbox/inbox."
  },
  {
    "id": "msg_03",
    "title": "Ключ партиционирования и порядок?",
    "category": "Messaging",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Ключ партиционирования и порядок?",
    "answer": "Одинаковый ключ → одна партиция; порядок внутри партиции хранится."
  },
  {
    "id": "msg_04",
    "title": "DLQ/ретраи — стратегия?",
    "category": "Messaging",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "DLQ/ретраи — стратегия?",
    "answer": "DLQ, экспоненциальные ретраи, poison-pill обработка."
  },
  {
    "id": "db_01",
    "title": "Индексы B-Tree vs Hash?",
    "category": "Databases",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Индексы B-Tree vs Hash?",
    "answer": "B-Tree — диапазоны/сортировки; Hash — равенство."
  },
  {
    "id": "db_02",
    "title": "Нормализация vs денормализация?",
    "category": "Databases",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Нормализация vs денормализация?",
    "answer": "Удаление дублей vs ускорение чтения ценой обновлений."
  },
  {
    "id": "db_03",
    "title": "Уровни изоляции?",
    "category": "Databases",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Уровни изоляции?",
    "answer": "RU/RC/RR/Serializable — выбор по аномалиям/параллелизму."
  },
  {
    "id": "db_04",
    "title": "Шардирование/репликация — паттерны?",
    "category": "Databases",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Шардирование/репликация — паттерны?",
    "answer": "Master/replica, leaderless, consistent hashing, ребаланс."
  },
  {
    "id": "cache_01",
    "title": "TTL/инвалидация — выбор?",
    "category": "Caching",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "TTL/инвалидация — выбор?",
    "answer": "По SLA и свежести; ручная/событийная инвалидация."
  },
  {
    "id": "cache_02",
    "title": "LRU/LFU/ARC — различия?",
    "category": "Caching",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "LRU/LFU/ARC — различия?",
    "answer": "LRU давность, LFU частота, ARC адаптивный гибрид."
  },
  {
    "id": "cache_03",
    "title": "Write-through/write-back/cache-aside?",
    "category": "Caching",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Write-through/write-back/cache-aside?",
    "answer": "Синхрон/асинхрон/обходная запись; консистентность vs латентность."
  },
  {
    "id": "test_01",
    "title": "Юнит/интеграция/E2E — различия?",
    "category": "Testing",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Юнит/интеграция/E2E — различия?",
    "answer": "Изолированная логика, связки компонентов, пользовательские сценарии."
  },
  {
    "id": "test_02",
    "title": "Testcontainers — зачем?",
    "category": "Testing",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Testcontainers — зачем?",
    "answer": "Реальные сервисы в Docker для интеграционных тестов."
  },
  {
    "id": "test_03",
    "title": "Mockito/Spy — когда мокать?",
    "category": "Testing",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Mockito/Spy — когда мокать?",
    "answer": "Моки для внешних контрактов, стабы для простых ответов."
  },
  {
    "id": "test_04",
    "title": "Pact/контрактное тестирование — выгоды?",
    "category": "Testing",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Pact/контрактное тестирование — выгоды?",
    "answer": "Гарантия совместимости провайдера/потребителя, меньше поломок."
  },
  {
    "id": "test_05",
    "title": "Пирамида тестов в микросервисах?",
    "category": "Testing",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Пирамида тестов в микросервисах?",
    "answer": "Больше юнитов, достаточная интеграция, целевые E2E, быстрый CI."
  },
  {
    "id": "msa_01",
    "title": "Монолит vs микросервисы — trade-offs?",
    "category": "Architecture",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Монолит vs микросервисы — trade-offs?",
    "answer": "Монолит проще стартовать; микросервисы — автономия/масштабирование, но сложнее операционка."
  },
  {
    "id": "msa_02",
    "title": "Саги и компенсирующие транзакции?",
    "category": "Architecture",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Саги и компенсирующие транзакции?",
    "answer": "Оркестрация/хореография; локальные транзакции, откаты."
  },
  {
    "id": "msa_03",
    "title": "API Gateway vs Service Mesh?",
    "category": "Architecture",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "API Gateway vs Service Mesh?",
    "answer": "Gateway — вход; Mesh — межсервисный L7 с mTLS/ретраями/обсервацией."
  },
  {
    "id": "msa_04",
    "title": "End-to-end идемпотентность?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "End-to-end идемпотентность?",
    "answer": "Idempotency-Key, дедупликация, хранение результатов, ретраи по всей цепочке."
  },
  {
    "id": "msa_05",
    "title": "Event sourcing/CQRS — когда?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Event sourcing/CQRS — когда?",
    "answer": "Историчность/проекции; согласованность/эволюция сложнее."
  },
  {
    "id": "msa_06",
    "title": "Анти‑коррупционный слой — зачем?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Анти‑коррупционный слой — зачем?",
    "answer": "Изоляция доменной модели при интеграции со старыми системами."
  },
  {
    "id": "perf_01",
    "title": "Какие профайлеры/метрики?",
    "category": "Performance",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Какие профайлеры/метрики?",
    "answer": "JFR, async-profiler, GC logs; latency/throughput/alloc rate/pauses."
  },
  {
    "id": "perf_02",
    "title": "Как снижать аллокации?",
    "category": "Performance",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как снижать аллокации?",
    "answer": "Меньше временных объектов, примитивы/буферы, профилировать горячие места."
  },
  {
    "id": "perf_03",
    "title": "Backpressure/реактивность?",
    "category": "Performance",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Backpressure/реактивность?",
    "answer": "Контроль давления, Reactor/RS, избегать OOM/очередей."
  },
  {
    "id": "perf_04",
    "title": "Тюнинг thread pool?",
    "category": "Performance",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Тюнинг thread pool?",
    "answer": "Размер от CPU/IO профиля, разделение задач, мониторинг очередей."
  },
  {
    "id": "secx_01",
    "title": "OWASP Top 10 — ключевые?",
    "category": "Security",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "OWASP Top 10 — ключевые?",
    "answer": "Injection, Broken Auth, Sensitive Data Exposure, SSRF, Misconfig."
  },
  {
    "id": "secx_02",
    "title": "CORS/CSP/mTLS — роль?",
    "category": "Security",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "CORS/CSP/mTLS — роль?",
    "answer": "CORS для фронтов; mTLS межсервисный; CSP чаще на фронте, выставляется заголовком."
  },
  {
    "id": "secx_03",
    "title": "Секреты и ротация?",
    "category": "Security",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Секреты и ротация?",
    "answer": "Vault/SM, KMS, least privilege, ротация и аудит."
  }
]