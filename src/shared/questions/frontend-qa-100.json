[
  {
    "id": "html_01",
    "title": "Doctype и режимы рендеринга",
    "category": "HTML",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Для чего служит doctype и что будет, если его не указать?",
    "answer": "Doctype включает стандартный режим рендеринга; без него возможен quirks mode и расхождения в бокс‑модели."
  },
  {
    "id": "html_02",
    "title": "Разница между блочными и строчными/строчно‑блочным...",
    "category": "HTML",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Разница между блочными и строчными/строчно‑блочными элементами?",
    "answer": "Блочные занимают всю строку; inline‑block ведёт себя как inline, но допускает размеры; inline не принимает width/height."
  },
  {
    "id": "html_03",
    "title": "Для чего нужны семантические теги header/main/arti...",
    "category": "HTML",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Для чего нужны семантические теги header/main/article/aside/footer?",
    "answer": "Улучшают доступность, структуру документа и SEO; помогают скринридерам и поиску."
  },
  {
    "id": "html_04",
    "title": "Как правильно связать label и input?",
    "category": "HTML",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Как правильно связать label и input?",
    "answer": "<label for=id> с соответствующим id на <input> или обёртка input внутри label — для доступности."
  },
  {
    "id": "html_05",
    "title": "Чем отличаются defer и async у <script>?",
    "category": "HTML",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Чем отличаются defer и async у <script>?",
    "answer": "async выполняет сразу после загрузки (в непредсказуемом порядке), defer — после парсинга, в порядке вхождения."
  },
  {
    "id": "html_06",
    "title": "Что такое Shadow DOM и зачем он нужен?",
    "category": "HTML",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое Shadow DOM и зачем он нужен?",
    "answer": "Изоляция разметки/стилей веб‑компонента, предотвращение конфликтов CSS, инкапсуляция."
  },
  {
    "id": "html_07",
    "title": "Как сделать доступное модальное окно?",
    "category": "HTML",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как сделать доступное модальное окно?",
    "answer": "role='dialog', aria-modal='true', фокус‑ловушка, возврат фокуса, закрытие по Esc, aria-labelledby/aria-describedby."
  },
  {
    "id": "html_08",
    "title": "Разница между type='button'|'submit'|'reset' у <bu...",
    "category": "HTML",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Разница между type='button'|'submit'|'reset' у <button>?",
    "answer": "submit отправляет форму; reset сбрасывает; button ничего не делает по умолчанию — явно указывайте type."
  },
  {
    "id": "html_09",
    "title": "Когда использовать <picture>/srcset/sizes?",
    "category": "HTML",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Когда использовать <picture>/srcset/sizes?",
    "answer": "Для адаптивных изображений/форматов (webp/avif), улучшения LCP и экономии трафика."
  },
  {
    "id": "html_10",
    "title": "Как организовать lazy‑loading изображений и iframe...",
    "category": "HTML",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Как организовать lazy‑loading изображений и iframes?",
    "answer": "loading='lazy', decoding='async', fetchpriority, placeholder/skeleton, IntersectionObserver для кастомных кейсов."
  },
  {
    "id": "html_11",
    "title": "Какие политики безопасности важны для HTML?",
    "category": "HTML",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Какие политики безопасности важны для HTML?",
    "answer": "CSP (nonce, strict-dynamic), Trusted Types, SRI, COOP/COEP, Permissions Policy."
  },
  {
    "id": "html_12",
    "title": "Что такое 'accessible name computation' и почему в...",
    "category": "HTML",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Что такое 'accessible name computation' и почему важно?",
    "answer": "Правила вычисления доступного имени из aria/текста; влияет на озвучку и тестируемость."
  },
  {
    "id": "css_01",
    "title": "Относительные vs абсолютные единицы (px, em, rem, ...",
    "category": "CSS",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Относительные vs абсолютные единицы (px, em, rem, %)?",
    "answer": "px — постоянная; em — от шрифта родителя; rem — от root; % — от контекста (например, ширина контейнера)."
  },
  {
    "id": "css_02",
    "title": "Как выровнять элементы во flex по осям?",
    "category": "CSS",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Как выровнять элементы во flex по осям?",
    "answer": "justify-content — главная ось, align-items — поперечная; align-self — для элемента."
  },
  {
    "id": "css_03",
    "title": "Grid: auto-fill vs auto-fit?",
    "category": "CSS",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Grid: auto-fill vs auto-fit?",
    "answer": "auto-fit сжимает пустые треки до 0 (minmax), auto-fill оставляет слоты."
  },
  {
    "id": "css_04",
    "title": "Специфичность и порядок каскада?",
    "category": "CSS",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Специфичность и порядок каскада?",
    "answer": "!important > inline > id > class/attr/pseudo-class > element; при равенстве позже объявленное правило побеждает."
  },
  {
    "id": "css_05",
    "title": "Как минимизировать reflow/paint?",
    "category": "CSS",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как минимизировать reflow/paint?",
    "answer": "transform/opacity вместо top/left, contain/content-visibility, умеренно will-change, избегать тяжёлых теней/фильтров."
  },
  {
    "id": "css_06",
    "title": "Container queries — когда полезны?",
    "category": "CSS",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Container queries — когда полезны?",
    "answer": "Для компонентов, которые подстраиваются под размер контейнера, а не вьюпорта."
  },
  {
    "id": "css_07",
    "title": "Что такое logical properties и зачем?",
    "category": "CSS",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое logical properties и зачем?",
    "answer": "margin-inline/padding-block и т.п. — учитывают направление письма, упрощают i18n."
  },
  {
    "id": "css_08",
    "title": "Липкий заголовок таблицы без обёрток?",
    "category": "CSS",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Липкий заголовок таблицы без обёрток?",
    "answer": "position: sticky; top:0 на th/thead; фон и z-index для перекрытий."
  },
  {
    "id": "css_09",
    "title": "CSS Modules vs CSS-in-JS — когда что?",
    "category": "CSS",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "CSS Modules vs CSS-in-JS — когда что?",
    "answer": "Modules — проще/быстрее; CSS-in-JS — динамические темы/скоуп, но дороже по перфомансу."
  },
  {
    "id": "css_10",
    "title": "Как контролировать CLS из-за изображений/шрифтов?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Как контролировать CLS из-за изображений/шрифтов?",
    "answer": "Размеры изображений, резерв места, font-display, preloading критичных ресурсов."
  },
  {
    "id": "css_11",
    "title": "Grid subgrid — основные кейсы?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Grid subgrid — основные кейсы?",
    "answer": "Единая сетка для вложенных компонентов, согласование колонок/рядов."
  },
  {
    "id": "css_12",
    "title": ":has() vs :nth-child() — различия?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": ":has() vs :nth-child() — различия?",
    "answer": "`:has()` — условный 'родительский' селектор; мощный, но потенциально затратный; :nth-child — позиционный."
  },
  {
    "id": "css_13",
    "title": "@media print — на что обратить внимание?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "@media print — на что обратить внимание?",
    "answer": "Скрыть UI-хром, настроить размеры/разрывы, контраст, отключить анимации/тёмные фоны."
  },
  {
    "id": "css_14",
    "title": "Критический CSS и загрузка шрифтов — стратегия?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Критический CSS и загрузка шрифтов — стратегия?",
    "answer": "Inline critical CSS, preload шрифтов, минимизация вариативных осей, кэширование."
  },
  {
    "id": "css_15",
    "title": "Организация тем без вспышек (FART)?",
    "category": "CSS",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Организация тем без вспышек (FART)?",
    "answer": "prefers-color-scheme + ранний инлайн‑скрипт выбора темы + CSS custom properties."
  },
  {
    "id": "js_01",
    "title": "Разница var/let/const и область видимости?",
    "category": "JavaScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Разница var/let/const и область видимости?",
    "answer": "var — функциональная + hoist; let/const — блочная; const запрещает переназначение binding."
  },
  {
    "id": "js_02",
    "title": "Что такое замыкание?",
    "category": "JavaScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Что такое замыкание?",
    "answer": "Функция 'помнит' окружение, доступ к переменным внешней функции после её завершения."
  },
  {
    "id": "js_03",
    "title": "== vs ===?",
    "category": "JavaScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "== vs ===?",
    "answer": "=== без приведения типа; == выполняет неявные преобразования."
  },
  {
    "id": "js_04",
    "title": "Всплытие событий и его остановка?",
    "category": "JavaScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Всплытие событий и его остановка?",
    "answer": "Событие поднимается к document; e.stopPropagation()/stopImmediatePropagation()."
  },
  {
    "id": "js_05",
    "title": "Для чего 'use strict'?",
    "category": "JavaScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Для чего 'use strict'?",
    "answer": "Строгий режим: запрет неявных глобальных, изменения в this и пр."
  },
  {
    "id": "js_06",
    "title": "Event loop: microtasks vs macrotasks — порядок?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Event loop: microtasks vs macrotasks — порядок?",
    "answer": "Синхронно → microtasks (promises) → render → macrotasks; microtasks опустошаются полностью."
  },
  {
    "id": "js_07",
    "title": "Что такое 'this' и bind/call/apply?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое 'this' и bind/call/apply?",
    "answer": "'this' определяется вызовом; bind/call/apply меняют контекст; стрелки берут из внешней области."
  },
  {
    "id": "js_08",
    "title": "Shallow vs deep copy объектов?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Shallow vs deep copy объектов?",
    "answer": "Поверхностная копирует верхний уровень; глубокая — все вложенности (JSON.* ограничен)."
  },
  {
    "id": "js_09",
    "title": "Мемоизация — зачем?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Мемоизация — зачем?",
    "answer": "Кеширование результатов по аргументам для дорогих вычислений."
  },
  {
    "id": "js_10",
    "title": "Мегаморфные коллсайты — почему плохо?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Мегаморфные коллсайты — почему плохо?",
    "answer": "Сбивают inline caches/JIT, ухудшают перфоманс."
  },
  {
    "id": "js_11",
    "title": "WeakMap/WeakSet — когда использовать?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "WeakMap/WeakSet — когда использовать?",
    "answer": "Ключи‑объекты без препятствий GC: приватные данные, кэши."
  },
  {
    "id": "js_12",
    "title": "Debounce и throttle — различия?",
    "category": "JavaScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Debounce и throttle — различия?",
    "answer": "Debounce откладывает до паузы; throttle ограничивает частоту."
  },
  {
    "id": "js_13",
    "title": "Генераторы/итераторы — применение?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Генераторы/итераторы — применение?",
    "answer": "Создание ленивых последовательностей, кооперативная многозадачность."
  },
  {
    "id": "js_14",
    "title": "ESM vs CJS — отличия?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "ESM vs CJS — отличия?",
    "answer": "ESM статичен, tree‑shaking/top‑level await; CJS — динамический require."
  },
  {
    "id": "js_15",
    "title": "Proxy/Reflect — зачем?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Proxy/Reflect — зачем?",
    "answer": "Перехват операций, построение реактивности/валидации/логов."
  },
  {
    "id": "js_16",
    "title": "Почему await добавляет microtask?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Почему await добавляет microtask?",
    "answer": "Продолжение в microtasks; рендер между микрозадач и макрозадач возможен."
  },
  {
    "id": "js_17",
    "title": "IEEE‑754: как работать с деньгами?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "IEEE‑754: как работать с деньгами?",
    "answer": "Использовать целые (в центах) или decimal/BigInt библиотеки, аккуратное округление."
  },
  {
    "id": "js_18",
    "title": "Паттерны ошибок в async‑коде?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Паттерны ошибок в async‑коде?",
    "answer": "try/catch, тайм‑ауты, отмена (AbortController), централизованный логгинг/ретраи."
  },
  {
    "id": "js_19",
    "title": "MessageChannel vs setTimeout(0)?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "MessageChannel vs setTimeout(0)?",
    "answer": "MessageChannel планирует раньше таймера; меньше дрейфа; иногда ближе к microtask checkpoint."
  },
  {
    "id": "js_20",
    "title": "Intl.Segmenter — польза?",
    "category": "JavaScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Intl.Segmenter — польза?",
    "answer": "Корректная работа с графемами (эмодзи/диакритика) вместо посимвольной."
  },
  {
    "id": "ts_01",
    "title": "type vs interface?",
    "category": "TypeScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "type vs interface?",
    "answer": "interface сливается декларативно; type — гибкие union/intersection/условные типы."
  },
  {
    "id": "ts_02",
    "title": "Тип never — где нужен?",
    "category": "TypeScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Тип never — где нужен?",
    "answer": "Невозможные значения; исчерпывающие switch/функции, которые не возвращают."
  },
  {
    "id": "ts_03",
    "title": "Зачем generics?",
    "category": "TypeScript",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Зачем generics?",
    "answer": "Переиспользуемость и безопасность без any."
  },
  {
    "id": "ts_04",
    "title": "Structural typing — что это?",
    "category": "TypeScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Structural typing — что это?",
    "answer": "Совместимость по форме, а не по имени; 'утинная' типизация."
  },
  {
    "id": "ts_05",
    "title": "Partial/Required/Pick/Omit — примеры?",
    "category": "TypeScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Partial/Required/Pick/Omit — примеры?",
    "answer": "Partial делает поля опциональными, Required — обязательными, Pick/Omit — выбор/исключение."
  },
  {
    "id": "ts_06",
    "title": "Как описать перегрузки функций?",
    "category": "TypeScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как описать перегрузки функций?",
    "answer": "Несколько сигнатур + одна реализация, совместимая со всеми."
  },
  {
    "id": "ts_07",
    "title": "Discriminated union — сужение?",
    "category": "TypeScript",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Discriminated union — сужение?",
    "answer": "Общий дискриминатор + исчерпывающий switch/guards."
  },
  {
    "id": "ts_08",
    "title": "Ковариантность/контравариантность параметров?",
    "category": "TypeScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Ковариантность/контравариантность параметров?",
    "answer": "Возвращаемые типы ковариантны; параметры — контравариантны; важно для коллбеков."
  },
  {
    "id": "ts_09",
    "title": "unknown vs any?",
    "category": "TypeScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "unknown vs any?",
    "answer": "unknown требует сужения; any выключает проверки и небезопасен."
  },
  {
    "id": "ts_10",
    "title": "Типобезопасный ответ API с ошибками?",
    "category": "TypeScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Типобезопасный ответ API с ошибками?",
    "answer": "Union {status:'ok'|'err', ...} и исчерпывающий switch без assertions."
  },
  {
    "id": "ts_11",
    "title": "Template literal types — когда удобны?",
    "category": "TypeScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Template literal types — когда удобны?",
    "answer": "Формирование строковых API (классы, ключи данных, маршруты)."
  },
  {
    "id": "ts_12",
    "title": "Строгий словарь без произвольных ключей?",
    "category": "TypeScript",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Строгий словарь без произвольных ключей?",
    "answer": "Record + ключи‑литералы, as const, readonly, ограничение индексной сигнатурой."
  },
  {
    "id": "react_01",
    "title": "Контролируемые vs неконтролируемые формы?",
    "category": "React",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Контролируемые vs неконтролируемые формы?",
    "answer": "Контролируемые через state; неконтролируемые — через ref/DOM."
  },
  {
    "id": "react_02",
    "title": "Зачем ключи в списках?",
    "category": "React",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Зачем ключи в списках?",
    "answer": "Стабилизируют элементы для diff; ключ должен быть стабильным и уникальным."
  },
  {
    "id": "react_03",
    "title": "Как избежать props drilling?",
    "category": "React",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Как избежать props drilling?",
    "answer": "Контекст, стор, композиция."
  },
  {
    "id": "react_04",
    "title": "useEffect vs useLayoutEffect?",
    "category": "React",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "useEffect vs useLayoutEffect?",
    "answer": "useEffect после коммита; useLayoutEffect синхронно до покраски для измерений."
  },
  {
    "id": "react_05",
    "title": "Оптимизация больших списков?",
    "category": "React",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Оптимизация больших списков?",
    "answer": "Виртуализация, memo, мемо‑селекторы, корректные ключи."
  },
  {
    "id": "react_06",
    "title": "Suspense — когда уместен?",
    "category": "React",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Suspense — когда уместен?",
    "answer": "Ожидание данных/ленивых модулей; локальные границы."
  },
  {
    "id": "react_07",
    "title": "Обработка ошибок в компонентах?",
    "category": "React",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Обработка ошибок в компонентах?",
    "answer": "Error Boundaries + централизованный логгинг; try/catch в эффектах."
  },
  {
    "id": "react_08",
    "title": "Как избежать stale в эффектах?",
    "category": "React",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как избежать stale в эффектах?",
    "answer": "Правильные зависимости, функциональные set, refs, мемо‑коллбеки."
  },
  {
    "id": "react_09",
    "title": "Concurrent Rendering и transitions — что дают?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Concurrent Rendering и transitions — что дают?",
    "answer": "Прерываемые обновления и плавные переходы (startTransition/useDeferredValue)."
  },
  {
    "id": "react_10",
    "title": "SSR/SSG/ISR — выбор?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "SSR/SSG/ISR — выбор?",
    "answer": "Баланс TTFB/динамики/кэша; SSR для динамики/SEO, SSG/ISR для статичного и редких изменений."
  },
  {
    "id": "react_11",
    "title": "Модалки и фокус‑менеджмент?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Модалки и фокус‑менеджмент?",
    "answer": "Portal, focus trap, aria‑атрибуты, возврат фокуса, Esc."
  },
  {
    "id": "react_12",
    "title": "Антипаттерны производительности?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Антипаттерны производительности?",
    "answer": "Гигантские контексты, анонимные функции в рендере, тяжёлые эффекты."
  },
  {
    "id": "react_13",
    "title": "Контролы с внутренним и внешним состоянием?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Контролы с внутренним и внешним состоянием?",
    "answer": "Режимы controlled/uncontrolled, единый источник истины, события commit."
  },
  {
    "id": "react_14",
    "title": "Когда применять Portals?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Когда применять Portals?",
    "answer": "Для слоёв над иерархией (модалки/тосты/тултипы)."
  },
  {
    "id": "react_15",
    "title": "Оптимизация контекста от перерисовок?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Оптимизация контекста от перерисовок?",
    "answer": "Дробить контексты, мему значения, использовать селекторы/контекст‑селекторы."
  },
  {
    "id": "react_16",
    "title": "React Query — ключевые практики?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "React Query — ключевые практики?",
    "answer": "Грамотные ключи, stale/cacheTime, invalidateQueries, фоновая ресинхронизация."
  },
  {
    "id": "react_17",
    "title": "Hydration mismatch — как избежать?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Hydration mismatch — как избежать?",
    "answer": "Убрать недетерминизм до монтирования, рендерить условное позже, одинаковые данные на сервере/клиенте."
  },
  {
    "id": "react_18",
    "title": "Как правильно тестировать компоненты (RTL)?",
    "category": "React",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Как правильно тестировать компоненты (RTL)?",
    "answer": "Тестировать поведение/доступность, MSW для сети, меньше снапшотов."
  },
  {
    "id": "state_01",
    "title": "Когда достаточно локального состояния?",
    "category": "State Management",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Когда достаточно локального состояния?",
    "answer": "Если состояние не шарится широко и влияет только на локальные узлы."
  },
  {
    "id": "state_02",
    "title": "Однонаправленный поток данных — зачем?",
    "category": "State Management",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Однонаправленный поток данных — зачем?",
    "answer": "Упрощает рассуждения и отладку: изменения через явные события."
  },
  {
    "id": "state_03",
    "title": "Redux Toolkit — плюсы?",
    "category": "State Management",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Redux Toolkit — плюсы?",
    "answer": "Меньше бойлерплейта, Immer, полезные дефолты и сериализуемые проверки."
  },
  {
    "id": "state_04",
    "title": "Zustand: как избежать лишних ререндеров?",
    "category": "State Management",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Zustand: как избежать лишних ререндеров?",
    "answer": "Селекторы + shallow, разделение стора, вычисления вне стора."
  },
  {
    "id": "state_05",
    "title": "React Query: cacheTime vs staleTime?",
    "category": "State Management",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "React Query: cacheTime vs staleTime?",
    "answer": "staleTime — свежесть; cacheTime — время удержания в памяти после unmount."
  },
  {
    "id": "state_06",
    "title": "Recoil/Jotai — идея атомов/селекторов?",
    "category": "State Management",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Recoil/Jotai — идея атомов/селекторов?",
    "answer": "Атомы — минимальные части состояния; селекторы — производные."
  },
  {
    "id": "state_07",
    "title": "Глобальный стор в микрофронтендах?",
    "category": "State Management",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Глобальный стор в микрофронтендах?",
    "answer": "Изоляция, события/каналы, слабая связанность, контрактные API."
  },
  {
    "id": "state_08",
    "title": "Согласованность кэша после мутаций?",
    "category": "State Management",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Согласованность кэша после мутаций?",
    "answer": "Optimistic update, инвалидация, patch‑операции, фоновый refetch."
  },
  {
    "id": "arch_01",
    "title": "Почему модульность важна и чем плохи глобальные си...",
    "category": "Architecture",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Почему модульность важна и чем плохи глобальные синглтоны?",
    "answer": "Снижает связанность и упрощает тесты; синглтоны создают скрытые зависимости."
  },
  {
    "id": "arch_02",
    "title": "Что такое FSD/feature‑based структура?",
    "category": "Architecture",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Что такое FSD/feature‑based структура?",
    "answer": "Слои entities/features/widgets/pages, public API модулей, правила импортов."
  },
  {
    "id": "arch_03",
    "title": "Ключевые веб‑метрики (LCP/CLS/FID/TTI) и улучшения...",
    "category": "Architecture",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Ключевые веб‑метрики (LCP/CLS/FID/TTI) и улучшения?",
    "answer": "Оптимизация критического пути: split, lazy, preconnect, оптимизация изображений, виртуализация."
  },
  {
    "id": "arch_04",
    "title": "Когда оправдан микрофронтенд?",
    "category": "Architecture",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Когда оправдан микрофронтенд?",
    "answer": "Независимые релизы/команды; цена — сложность сборки, общих зависимостей, коммуникаций."
  },
  {
    "id": "arch_05",
    "title": "Как организовать i18n в SPA?",
    "category": "Architecture",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как организовать i18n в SPA?",
    "answer": "Каталоги сообщений, ICU, динамическая загрузка, валидация ключей, fallbacks."
  },
  {
    "id": "arch_06",
    "title": "Варианты деплоя SPA и trade‑offs?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Варианты деплоя SPA и trade‑offs?",
    "answer": "CDN (CSR), SSR (TTFB/SEO), Edge SSR (гео/кэш); выбирать по метрикам и SLA."
  },
  {
    "id": "arch_07",
    "title": "CSP/Trusted Types/SRI — основные принципы?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "CSP/Trusted Types/SRI — основные принципы?",
    "answer": "Nonce+strict-dynamic, политики TT, SRI на CDN, отчёты, постепенное включение."
  },
  {
    "id": "arch_08",
    "title": "Стратегии кэширования (HTTP/SW) для SPA?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Стратегии кэширования (HTTP/SW) для SPA?",
    "answer": "Stale‑while‑revalidate, versioned assets, runtime‑кэш API, аккуратная инвалидация."
  },
  {
    "id": "arch_09",
    "title": "Наблюдаемость фронта — что собирать?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Наблюдаемость фронта — что собирать?",
    "answer": "RUM, ошибки/трейсинг, sourcemaps, алерты по SLO, бюджеты в CI."
  },
  {
    "id": "arch_10",
    "title": "Подход к фича‑флагам и экспериментации?",
    "category": "Architecture",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Подход к фича‑флагам и экспериментации?",
    "answer": "Аудитируемые флаги, трекинг, канареечные релизы, безопасные откаты."
  },
  {
    "id": "algo_01",
    "title": "Что такое сложность O(n), O(log n), O(n log n)?",
    "category": "Algorithms",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Что такое сложность O(n), O(log n), O(n log n)?",
    "answer": "Асимптотическая оценка роста времени/памяти от размера входа."
  },
  {
    "id": "algo_02",
    "title": "Два указателя — где полезно?",
    "category": "Algorithms",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Два указателя — где полезно?",
    "answer": "Пары/палиндромы/слияние, линейные решения на отсортированных массивах/строках."
  },
  {
    "id": "algo_03",
    "title": "BFS vs DFS — различия и применение?",
    "category": "Algorithms",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "BFS vs DFS — различия и применение?",
    "answer": "BFS — кратчайшие пути в невзвешенных графах; DFS — обход/циклы/топосорт."
  },
  {
    "id": "algo_04",
    "title": "Эффективная реализация LRU?",
    "category": "Algorithms",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Эффективная реализация LRU?",
    "answer": "HashMap + двусвязный список: O(1) get/set; вытеснение 'старого'."
  },
  {
    "id": "algo_05",
    "title": "Когда нужен heap/priority queue на фронте?",
    "category": "Algorithms",
    "difficulty": 3,
    "bucket": "architecture",
    "prompt": "Когда нужен heap/priority queue на фронте?",
    "answer": "Планировщики, топ‑K, Dijkstra, merge K отсортированных."
  }
]