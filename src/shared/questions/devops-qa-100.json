[
  {
    "id": "devops_001_основные_команды_linux",
    "title": "Основные команды Linux",
    "category": "Linux",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Назовите базовые команды Linux для навигации по файловой системе.",
    "answer": "cd, ls, pwd, cp, mv, rm, mkdir, rmdir."
  },
  {
    "id": "devops_002_права_доступа",
    "title": "Права доступа",
    "category": "Linux",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как работает система прав доступа в Linux?",
    "answer": "Триадная модель: владелец, группа, остальные; права rwx; команды chmod, chown, umask."
  },
  {
    "id": "devops_003_tcp_vs_udp",
    "title": "TCP vs UDP",
    "category": "Networking",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Чем отличается TCP от UDP?",
    "answer": "TCP — надёжный, с установлением соединения, контроль последовательности. UDP — без соединения, быстрее, без гарантии доставки."
  },
  {
    "id": "devops_004_dns",
    "title": "DNS",
    "category": "Networking",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое DNS и как работает резолвинг?",
    "answer": "Система доменных имён, резолвинг через рекурсивные и авторитетные сервера, кеширование."
  },
  {
    "id": "devops_005_git_rebase_vs_merge",
    "title": "Git rebase vs merge",
    "category": "Git/CI",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Разница между git rebase и git merge?",
    "answer": "merge сохраняет историю ветвлений, rebase переписывает историю, делает линейной."
  },
  {
    "id": "devops_006_pipeline",
    "title": "Pipeline",
    "category": "CI/CD",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое CI/CD pipeline и какие этапы он обычно содержит?",
    "answer": "Build, test, package, deploy. CI — проверка кода, CD — автоматическая доставка/развёртывание."
  },
  {
    "id": "devops_007_docker_vs_vm",
    "title": "Docker vs VM",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Чем Docker отличается от виртуальных машин?",
    "answer": "Docker — контейнеризация на уровне ОС, лёгкие изоляции. VM — виртуализация на уровне гипервизора, тяжелее."
  },
  {
    "id": "devops_008_pod_и_deployment",
    "title": "Pod и Deployment",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "В чём разница между Pod и Deployment в Kubernetes?",
    "answer": "Pod — минимальная сущность (контейнеры). Deployment управляет ReplicaSet, обеспечивает масштабирование и обновления."
  },
  {
    "id": "devops_009_iam",
    "title": "IAM",
    "category": "Cloud",
    "difficulty": 1,
    "bucket": "screening",
    "prompt": "Что такое IAM в AWS/GCP?",
    "answer": "Identity and Access Management — система управления доступами и ролями."
  },
  {
    "id": "devops_010_prometheus",
    "title": "Prometheus",
    "category": "Monitoring",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как работает Prometheus и чем отличается pull-модель от push?",
    "answer": "Prometheus тянет метрики через HTTP (pull). Push требует pushgateway. Pull упрощает автообнаружение и отказоустойчивость."
  },
  {
    "id": "devops_011_process_management",
    "title": "Управление процессами в Linux",
    "category": "Linux",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как работают процессы в Linux и какие команды используются для управления ими?",
    "answer": "ps, top, htop, kill, killall, pkill, jobs, fg, bg, nohup. Процессы имеют PID, PPID, состояние (R, S, D, Z, T)."
  },
  {
    "id": "devops_012_systemd",
    "title": "Systemd и управление сервисами",
    "category": "Linux",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое systemd и как управлять сервисами через systemctl?",
    "answer": "Systemd — система инициализации и менеджер сервисов. systemctl start/stop/restart/reload/enable/disable, journalctl для логов."
  },
  {
    "id": "devops_013_log_management",
    "title": "Управление логами",
    "category": "Linux",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как организовать централизованное управление логами в Linux?",
    "answer": "rsyslog, syslog-ng, journald, ELK Stack (Elasticsearch, Logstash, Kibana), Fluentd, централизованные логи через сеть."
  },
  {
    "id": "devops_014_disk_management",
    "title": "Управление дисками и файловыми системами",
    "category": "Linux",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как управлять дисками, разделами и файловыми системами в Linux?",
    "answer": "fdisk, parted, mkfs, mount, umount, df, du, lsof, iostat. LVM для логических томов, RAID для отказоустойчивости."
  },
  {
    "id": "devops_015_network_configuration",
    "title": "Сетевая конфигурация Linux",
    "category": "Linux",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить сеть в Linux и диагностировать сетевые проблемы?",
    "answer": "ip, ifconfig, netstat, ss, tcpdump, wireshark, iptables, firewalld, route, ping, traceroute, nmap."
  },
  {
    "id": "devops_016_dockerfile_best_practices",
    "title": "Лучшие практики Dockerfile",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Какие лучшие практики следует соблюдать при написании Dockerfile?",
    "answer": "Использовать .dockerignore, многоэтапную сборку, минимальные базовые образы, кеширование слоев, не запускать как root, HEALTHCHECK."
  },
  {
    "id": "devops_017_docker_compose",
    "title": "Docker Compose",
    "category": "Containers",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое Docker Compose и как его использовать для оркестрации контейнеров?",
    "answer": "Docker Compose — инструмент для определения и запуска многоконтейнерных приложений. YAML файл с сервисами, сетями, томами."
  },
  {
    "id": "devops_018_container_registry",
    "title": "Container Registry",
    "category": "Containers",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое Container Registry и какие популярные решения существуют?",
    "answer": "Хранилище Docker образов. Docker Hub, AWS ECR, Google GCR, Azure ACR, Harbor, GitLab Container Registry."
  },
  {
    "id": "devops_019_container_security",
    "title": "Безопасность контейнеров",
    "category": "Containers",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как обеспечить безопасность контейнеров и что такое container scanning?",
    "answer": "Сканирование уязвимостей (Trivy, Clair), минимальные образы, non-root пользователи, secrets management, network policies."
  },
  {
    "id": "devops_020_container_runtime",
    "title": "Container Runtime",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое container runtime и какие альтернативы Docker существуют?",
    "answer": "Container runtime — низкоуровневый компонент для запуска контейнеров. containerd, CRI-O, runc, gVisor, Kata Containers."
  },
  {
    "id": "devops_021_kubernetes_architecture",
    "title": "Архитектура Kubernetes",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Опишите архитектуру Kubernetes и основные компоненты кластера.",
    "answer": "Master: API Server, etcd, Scheduler, Controller Manager. Worker: kubelet, kube-proxy, container runtime. etcd для хранения состояния."
  },
  {
    "id": "devops_022_kubernetes_services",
    "title": "Kubernetes Services",
    "category": "Kubernetes",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Какие типы Services существуют в Kubernetes и для чего они используются?",
    "answer": "ClusterIP (внутренний), NodePort (порт на ноде), LoadBalancer (внешний балансировщик), ExternalName (внешний DNS)."
  },
  {
    "id": "devops_023_kubernetes_ingress",
    "title": "Kubernetes Ingress",
    "category": "Kubernetes",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое Ingress в Kubernetes и как настроить маршрутизацию трафика?",
    "answer": "Ingress — API для управления внешним доступом к сервисам. Ingress Controller (nginx, traefik), правила маршрутизации, SSL/TLS."
  },
  {
    "id": "devops_024_kubernetes_configmap_secret",
    "title": "ConfigMap и Secret",
    "category": "Kubernetes",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как управлять конфигурацией и секретами в Kubernetes?",
    "answer": "ConfigMap для конфигурации, Secret для чувствительных данных. Создание, использование в Pod, обновление без перезапуска."
  },
  {
    "id": "devops_025_kubernetes_persistent_volumes",
    "title": "Persistent Volumes",
    "category": "Kubernetes",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как организовать постоянное хранение данных в Kubernetes?",
    "answer": "PV (Persistent Volume), PVC (Persistent Volume Claim), StorageClass. Поддержка различных типов хранилищ (NFS, AWS EBS, GCP PD)."
  },
  {
    "id": "devops_026_kubernetes_hpa",
    "title": "Horizontal Pod Autoscaler",
    "category": "Kubernetes",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить автоматическое масштабирование подов в Kubernetes?",
    "answer": "HPA на основе CPU/Memory метрик, VPA для вертикального масштабирования, Cluster Autoscaler для добавления нод."
  },
  {
    "id": "devops_027_kubernetes_rbac",
    "title": "RBAC в Kubernetes",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как настроить управление доступом в Kubernetes через RBAC?",
    "answer": "Role, ClusterRole, RoleBinding, ClusterRoleBinding. Принцип минимальных привилегий, ServiceAccount для приложений."
  },
  {
    "id": "devops_028_kubernetes_operators",
    "title": "Kubernetes Operators",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Kubernetes Operators и для чего они используются?",
    "answer": "Operators — расширения Kubernetes для управления stateful приложениями. CRD, Controller pattern, автоматизация жизненного цикла."
  },
  {
    "id": "devops_029_jenkins_pipeline",
    "title": "Jenkins Pipeline",
    "category": "CI/CD",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как создать и настроить Jenkins Pipeline для автоматизации сборки?",
    "answer": "Declarative/Scripted Pipeline, Jenkinsfile, stages, steps, agents, environment variables, shared libraries."
  },
  {
    "id": "devops_030_gitlab_ci",
    "title": "GitLab CI/CD",
    "category": "CI/CD",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как настроить CI/CD pipeline в GitLab?",
    "answer": ".gitlab-ci.yml, stages, jobs, runners, variables, artifacts, cache, deployment environments."
  },
  {
    "id": "devops_031_github_actions",
    "title": "GitHub Actions",
    "category": "CI/CD",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как использовать GitHub Actions для автоматизации workflow?",
    "answer": "YAML workflow файлы, events (push, pull_request), jobs, steps, actions, secrets, matrix strategy."
  },
  {
    "id": "devops_032_azure_devops",
    "title": "Azure DevOps",
    "category": "CI/CD",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить CI/CD pipeline в Azure DevOps?",
    "answer": "Azure Pipelines, YAML/Classic pipelines, agents, tasks, variables, artifacts, release management."
  },
  {
    "id": "devops_033_circleci",
    "title": "CircleCI",
    "category": "CI/CD",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как настроить CI/CD в CircleCI?",
    "answer": ".circleci/config.yml, jobs, workflows, orbs, environment variables, caching, parallelism."
  },
  {
    "id": "devops_034_aws_ec2",
    "title": "AWS EC2",
    "category": "Cloud",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как работать с EC2 в AWS и какие типы инстансов существуют?",
    "answer": "Elastic Compute Cloud, типы: General Purpose, Compute Optimized, Memory Optimized, Storage Optimized. AMI, Security Groups, Key Pairs."
  },
  {
    "id": "devops_035_aws_s3",
    "title": "AWS S3",
    "category": "Cloud",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое Amazon S3 и как настроить хранение объектов?",
    "answer": "Simple Storage Service, buckets, objects, storage classes (Standard, IA, Glacier), versioning, lifecycle policies, CORS."
  },
  {
    "id": "devops_036_aws_rds",
    "title": "AWS RDS",
    "category": "Cloud",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить управляемую базу данных в AWS RDS?",
    "answer": "Relational Database Service, поддержка MySQL, PostgreSQL, Oracle, SQL Server. Multi-AZ, Read Replicas, automated backups."
  },
  {
    "id": "devops_037_aws_lambda",
    "title": "AWS Lambda",
    "category": "Cloud",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое AWS Lambda и как создать serverless функцию?",
    "answer": "Serverless compute service, функции без серверов, triggers (API Gateway, S3, DynamoDB), cold start, layers."
  },
  {
    "id": "devops_038_aws_eks",
    "title": "AWS EKS",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как развернуть Kubernetes кластер в AWS EKS?",
    "answer": "Elastic Kubernetes Service, managed Kubernetes, worker nodes (EC2), networking (VPC, subnets), IAM roles, load balancers."
  },
  {
    "id": "devops_039_gcp_gke",
    "title": "Google GKE",
    "category": "Cloud",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как использовать Google Kubernetes Engine (GKE)?",
    "answer": "Managed Kubernetes в GCP, cluster creation, node pools, auto-scaling, networking, IAM, Cloud Build integration."
  },
  {
    "id": "devops_040_azure_aks",
    "title": "Azure AKS",
    "category": "Cloud",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как развернуть Kubernetes в Azure AKS?",
    "answer": "Azure Kubernetes Service, managed Kubernetes, node pools, virtual networks, Azure AD integration, monitoring."
  },
  {
    "id": "devops_041_prometheus_metrics",
    "title": "Prometheus метрики",
    "category": "Monitoring",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить сбор метрик с помощью Prometheus?",
    "answer": "PromQL запросы, exporters (node_exporter, cadvisor), service discovery, alerting rules, recording rules."
  },
  {
    "id": "devops_042_grafana_dashboards",
    "title": "Grafana дашборды",
    "category": "Monitoring",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Как создать дашборды в Grafana для мониторинга?",
    "answer": "Data sources (Prometheus, InfluxDB), panels, queries, variables, templating, alerting, user management."
  },
  {
    "id": "devops_043_jaeger_tracing",
    "title": "Distributed Tracing с Jaeger",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как настроить distributed tracing для микросервисов?",
    "answer": "Jaeger, OpenTracing, spans, traces, context propagation, sampling, correlation с logs и metrics."
  },
  {
    "id": "devops_044_elk_stack",
    "title": "ELK Stack",
    "category": "Monitoring",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить централизованное логирование с ELK Stack?",
    "answer": "Elasticsearch для хранения, Logstash для обработки, Kibana для визуализации, Beats для сбора логов."
  },
  {
    "id": "devops_045_apm",
    "title": "Application Performance Monitoring",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое APM и какие инструменты используются?",
    "answer": "New Relic, Datadog, AppDynamics, Dynatrace. Мониторинг производительности приложений, user experience, business metrics."
  },
  {
    "id": "devops_046_terraform_basics",
    "title": "Terraform основы",
    "category": "IaC",
    "difficulty": 2,
    "bucket": "deep",
    "prompt": "Что такое Terraform и как создать инфраструктуру как код?",
    "answer": "HashiCorp Terraform, providers, resources, state management, modules, variables, outputs, remote state."
  },
  {
    "id": "devops_047_ansible_playbooks",
    "title": "Ansible Playbooks",
    "category": "IaC",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как использовать Ansible для автоматизации конфигурации?",
    "answer": "Playbooks, inventory, modules, handlers, roles, templates, variables, vault для секретов."
  },
  {
    "id": "devops_048_cloudformation",
    "title": "AWS CloudFormation",
    "category": "IaC",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как использовать CloudFormation для управления AWS ресурсами?",
    "answer": "JSON/YAML templates, stacks, parameters, outputs, conditions, intrinsic functions, nested stacks."
  },
  {
    "id": "devops_049_pulumi",
    "title": "Pulumi",
    "category": "IaC",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Pulumi и как использовать его для IaC?",
    "answer": "Pulumi — современный IaC инструмент с поддержкой реальных языков программирования (Python, TypeScript, Go)."
  },
  {
    "id": "devops_050_crossplane",
    "title": "Crossplane",
    "category": "IaC",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Crossplane и как использовать его для управления облачными ресурсами?",
    "answer": "Crossplane — Kubernetes-native IaC, CRD для облачных ресурсов, composition для переиспользования, GitOps workflow."
  },
  {
    "id": "devops_051_secrets_management",
    "title": "Управление секретами",
    "category": "Security",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как безопасно управлять секретами в DevOps pipeline?",
    "answer": "HashiCorp Vault, AWS Secrets Manager, Azure Key Vault, Kubernetes Secrets, encryption at rest и in transit."
  },
  {
    "id": "devops_052_vulnerability_scanning",
    "title": "Сканирование уязвимостей",
    "category": "Security",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как организовать автоматическое сканирование уязвимостей?",
    "answer": "Trivy, Clair, Snyk, OWASP ZAP, SAST/DAST, container scanning, dependency checking, security gates в CI/CD."
  },
  {
    "id": "devops_053_zero_trust",
    "title": "Zero Trust Security",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Zero Trust Security и как его реализовать?",
    "answer": "Принцип 'never trust, always verify', micro-segmentation, identity-based access, continuous verification, least privilege."
  },
  {
    "id": "devops_054_compliance",
    "title": "Compliance и аудит",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как обеспечить соответствие требованиям безопасности и аудиту?",
    "answer": "SOC 2, ISO 27001, PCI DSS, GDPR, audit logs, compliance monitoring, policy as code, automated compliance checks."
  },
  {
    "id": "devops_055_network_security",
    "title": "Сетевая безопасность",
    "category": "Security",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как обеспечить безопасность сети в облачной инфраструктуре?",
    "answer": "VPC, security groups, NACLs, WAF, DDoS protection, VPN, private endpoints, network segmentation."
  },
  {
    "id": "devops_056_gitops",
    "title": "GitOps",
    "category": "GitOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое GitOps и как его реализовать?",
    "answer": "Git как источник истины, ArgoCD, Flux, автоматическое развертывание из Git, declarative configuration, drift detection."
  },
  {
    "id": "devops_057_chaos_engineering",
    "title": "Chaos Engineering",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Chaos Engineering и как его использовать?",
    "answer": "Chaos Monkey, Gremlin, Litmus, controlled failure injection, resilience testing, fault tolerance, learning from failures."
  },
  {
    "id": "devops_058_observability",
    "title": "Observability",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Observability и как его достичь?",
    "answer": "Three pillars: metrics, logs, traces. OpenTelemetry, correlation, context propagation, distributed tracing, service mesh."
  },
  {
    "id": "devops_059_service_mesh",
    "title": "Service Mesh",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Service Mesh и какие решения существуют?",
    "answer": "Istio, Linkerd, Consul Connect. Traffic management, security, observability, policy enforcement, sidecar proxy pattern."
  },
  {
    "id": "devops_060_edge_computing",
    "title": "Edge Computing",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как организовать DevOps для Edge Computing?",
    "answer": "CDN, edge locations, distributed deployment, latency optimization, local processing, 5G, IoT, edge-native applications."
  },
  {
    "id": "devops_061_performance_optimization",
    "title": "Оптимизация производительности",
    "category": "Performance",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как оптимизировать производительность приложений и инфраструктуры?",
    "answer": "Profiling, caching strategies, database optimization, CDN, load balancing, horizontal/vertical scaling, resource monitoring."
  },
  {
    "id": "devops_062_cost_optimization",
    "title": "Оптимизация затрат",
    "category": "Performance",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как оптимизировать затраты на облачную инфраструктуру?",
    "answer": "Right-sizing, reserved instances, spot instances, auto-scaling, resource tagging, cost monitoring, FinOps practices."
  },
  {
    "id": "devops_063_capacity_planning",
    "title": "Планирование мощностей",
    "category": "Performance",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как планировать мощности для растущих приложений?",
    "answer": "Capacity planning, load testing, performance baselines, growth projections, auto-scaling policies, resource forecasting."
  },
  {
    "id": "devops_064_disaster_recovery",
    "title": "Disaster Recovery",
    "category": "Performance",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как организовать план восстановления после сбоев?",
    "answer": "RTO/RPO, backup strategies, multi-region deployment, failover procedures, data replication, testing, documentation."
  },
  {
    "id": "devops_065_high_availability",
    "title": "Высокая доступность",
    "category": "Performance",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как обеспечить высокую доступность системы?",
    "answer": "Load balancing, redundancy, health checks, circuit breakers, graceful degradation, multi-AZ deployment, SLA/SLO."
  },
  {
    "id": "devops_066_helm_charts",
    "title": "Helm Charts",
    "category": "Kubernetes",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое Helm и как использовать Charts для управления Kubernetes приложениями?",
    "answer": "Helm — package manager для Kubernetes, Charts — шаблоны, values.yaml, templating, repositories, lifecycle management."
  },
  {
    "id": "devops_067_knative",
    "title": "Knative",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Knative и как использовать его для serverless на Kubernetes?",
    "answer": "Knative — платформа для serverless на Kubernetes, Serving для масштабирования до нуля, Eventing для событий."
  },
  {
    "id": "devops_068_tekton",
    "title": "Tekton",
    "category": "CI/CD",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Tekton и как использовать его для CI/CD на Kubernetes?",
    "answer": "Tekton — Kubernetes-native CI/CD, Tasks, Pipelines, Workspaces, Triggers, cloud-native подход к автоматизации."
  },
  {
    "id": "devops_069_argo_workflows",
    "title": "Argo Workflows",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Argo Workflows и как использовать его для оркестрации задач?",
    "answer": "Argo Workflows — workflow engine для Kubernetes, DAG, parameterization, artifact management, event-driven workflows."
  },
  {
    "id": "devops_070_wasm",
    "title": "WebAssembly в DevOps",
    "category": "Modern DevOps",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как WebAssembly влияет на современный DevOps?",
    "answer": "WASM для edge computing, universal binaries, security sandboxing, performance, cloud-native applications, WASI."
  },
  {
    "id": "devops_071_linux_kernel",
    "title": "Linux Kernel и модули",
    "category": "Linux",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как работают модули ядра Linux и как их загружать?",
    "answer": "Loadable Kernel Modules (LKM), insmod, rmmod, modprobe, depmod, /proc/modules, /sys/module, kernel headers."
  },
  {
    "id": "devops_072_linux_containers",
    "title": "Linux Containers (LXC/LXD)",
    "category": "Linux",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Что такое LXC/LXD и чем отличается от Docker?",
    "answer": "LXC — системные контейнеры, LXD — daemon для управления, полная ОС в контейнере, vs Docker application containers."
  },
  {
    "id": "devops_073_linux_security",
    "title": "Безопасность Linux",
    "category": "Linux",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как обеспечить безопасность Linux сервера?",
    "answer": "SELinux/AppArmor, fail2ban, ufw/iptables, SSH hardening, regular updates, auditd, AIDE, Lynis security scanner."
  },
  {
    "id": "devops_074_linux_performance",
    "title": "Производительность Linux",
    "category": "Linux",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как диагностировать и оптимизировать производительность Linux?",
    "answer": "htop, iotop, perf, strace, ltrace, vmstat, iostat, sar, flame graphs, profiling tools."
  },
  {
    "id": "devops_075_linux_clustering",
    "title": "Кластеризация Linux",
    "category": "Linux",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как настроить кластер на базе Linux?",
    "answer": "Pacemaker/Corosync, DRBD, Heartbeat, Keepalived, HAProxy, load balancing, failover mechanisms."
  },
  {
    "id": "devops_076_docker_swarm",
    "title": "Docker Swarm",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить Docker Swarm для оркестрации контейнеров?",
    "answer": "Swarm mode, manager/worker nodes, services, stacks, secrets, configs, overlay networks, load balancing."
  },
  {
    "id": "devops_077_docker_networking",
    "title": "Docker Networking",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить сеть в Docker и какие типы сетей существуют?",
    "answer": "bridge, host, overlay, macvlan, custom networks, port mapping, service discovery, DNS resolution."
  },
  {
    "id": "devops_078_docker_storage",
    "title": "Docker Storage",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как управлять данными в Docker контейнерах?",
    "answer": "Volumes, bind mounts, tmpfs, volume drivers, data persistence, backup strategies, storage optimization."
  },
  {
    "id": "devops_079_docker_multi_stage",
    "title": "Docker Multi-stage Builds",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как использовать multi-stage builds для оптимизации Docker образов?",
    "answer": "Multiple FROM statements, build stages, intermediate images, final image optimization, build context reduction."
  },
  {
    "id": "devops_080_docker_registry",
    "title": "Private Docker Registry",
    "category": "Containers",
    "difficulty": 3,
    "bucket": "deep",
    "prompt": "Как настроить приватный Docker Registry?",
    "answer": "Docker Registry, Harbor, authentication, SSL/TLS, garbage collection, replication, vulnerability scanning."
  },
  {
    "id": "devops_081_kubernetes_operators",
    "title": "Kubernetes Operators Advanced",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как создать собственный Kubernetes Operator?",
    "answer": "Operator SDK, CRD, Controller pattern, reconciliation loop, finalizers, status updates, event handling."
  },
  {
    "id": "devops_082_kubernetes_admission",
    "title": "Kubernetes Admission Controllers",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Admission Controllers и как их использовать?",
    "answer": "Validating/Mutating admission controllers, webhooks, policy enforcement, OPA Gatekeeper, security policies."
  },
  {
    "id": "devops_083_kubernetes_custom_resources",
    "title": "Custom Resource Definitions",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как создать Custom Resource Definitions в Kubernetes?",
    "answer": "CRD, API versioning, validation schemas, subresources, status, finalizers, controller implementation."
  },
  {
    "id": "devops_084_kubernetes_networking",
    "title": "Kubernetes Networking Advanced",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как настроить продвинутую сеть в Kubernetes?",
    "answer": "CNI plugins, Calico, Flannel, Weave, network policies, service mesh, eBPF, Cilium."
  },
  {
    "id": "devops_085_kubernetes_storage",
    "title": "Kubernetes Storage Advanced",
    "category": "Kubernetes",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как настроить продвинутое хранение в Kubernetes?",
    "answer": "CSI drivers, dynamic provisioning, storage classes, volume snapshots, backup/restore, distributed storage."
  },
  {
    "id": "devops_086_multi_cloud",
    "title": "Multi-Cloud Strategy",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как реализовать multi-cloud стратегию?",
    "answer": "Cloud abstraction, Terraform multi-provider, Kubernetes federation, data portability, vendor lock-in avoidance."
  },
  {
    "id": "devops_087_cloud_native",
    "title": "Cloud Native Architecture",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое Cloud Native архитектура и как ее реализовать?",
    "answer": "12-factor app, microservices, containers, service mesh, observability, CI/CD, cloud-native patterns."
  },
  {
    "id": "devops_088_edge_computing",
    "title": "Edge Computing Infrastructure",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как организовать инфраструктуру для Edge Computing?",
    "answer": "CDN, edge locations, distributed deployment, latency optimization, 5G, IoT, edge-native applications."
  },
  {
    "id": "devops_089_hybrid_cloud",
    "title": "Hybrid Cloud",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как реализовать Hybrid Cloud архитектуру?",
    "answer": "On-premises + cloud, data sovereignty, compliance, connectivity, workload portability, unified management."
  },
  {
    "id": "devops_090_cloud_migration",
    "title": "Cloud Migration",
    "category": "Cloud",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как провести миграцию в облако?",
    "answer": "Assessment, lift-and-shift, refactoring, rearchitecting, migration strategies, testing, rollback plans."
  },
  {
    "id": "devops_091_security_scanning",
    "title": "Security Scanning Automation",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как автоматизировать сканирование безопасности в CI/CD?",
    "answer": "SAST/DAST integration, security gates, policy as code, automated remediation, security metrics, compliance reporting."
  },
  {
    "id": "devops_092_identity_management",
    "title": "Identity and Access Management",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как организовать управление идентификацией в DevOps?",
    "answer": "SSO, SAML, OAuth, OIDC, RBAC, ABAC, identity providers, federation, MFA, privileged access management."
  },
  {
    "id": "devops_093_data_protection",
    "title": "Data Protection",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как обеспечить защиту данных в DevOps pipeline?",
    "answer": "Encryption at rest/in transit, key management, data classification, DLP, backup encryption, data retention policies."
  },
  {
    "id": "devops_094_incident_response",
    "title": "Incident Response",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как организовать реагирование на инциденты безопасности?",
    "answer": "Incident response plan, forensics, containment, eradication, recovery, lessons learned, automation, playbooks."
  },
  {
    "id": "devops_095_compliance_automation",
    "title": "Compliance Automation",
    "category": "Security",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как автоматизировать соответствие требованиям безопасности?",
    "answer": "Policy as code, automated compliance checks, continuous monitoring, audit trails, reporting, remediation workflows."
  },
  {
    "id": "devops_096_observability_stack",
    "title": "Observability Stack",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как построить полноценный observability stack?",
    "answer": "Metrics (Prometheus), Logs (ELK), Traces (Jaeger), APM, correlation, alerting, dashboards, SLO/SLI."
  },
  {
    "id": "devops_097_aiops",
    "title": "AIOps",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Что такое AIOps и как его использовать?",
    "answer": "AI/ML для IT operations, anomaly detection, root cause analysis, predictive maintenance, automated remediation."
  },
  {
    "id": "devops_098_chaos_engineering_advanced",
    "title": "Advanced Chaos Engineering",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как реализовать продвинутый Chaos Engineering?",
    "answer": "Chaos Monkey, Gremlin, Litmus, controlled experiments, hypothesis testing, resilience metrics, learning culture."
  },
  {
    "id": "devops_099_sre_practices",
    "title": "SRE Practices",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как внедрить практики Site Reliability Engineering?",
    "answer": "SLO/SLI, error budgets, toil reduction, blameless postmortems, capacity planning, incident management, automation."
  },
  {
    "id": "devops_100_observability_culture",
    "title": "Observability Culture",
    "category": "Monitoring",
    "difficulty": 4,
    "bucket": "architecture",
    "prompt": "Как создать культуру observability в команде?",
    "answer": "Observability mindset, shared responsibility, continuous learning, metrics-driven decisions, feedback loops, tooling adoption."
  }
]